library("Seurat")
library("patchwork")
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library("poibin")
library("sgof")
library(stats)
library(rlang)
library(grid)
library('patchwork')
library(RColorBrewer)
library(ape)
library(gplots)
library(pheatmap)
library(viridisLite)
library(viridis)
library(ComplexHeatmap)
library(circlize)


#C means CGRP RESPONDER & PACAP NONRESPONDER, D means CGRP RESPONDER & PACAP RESPONDER)

setwd("D:/pik3cd project/material")
bat1 <- read.table("all.gene_counts_NTG.txt", header=TRUE, row.names=1)
bat2 <- read.table("all.gene_counts_TBI.txt", header=TRUE, row.names=1)

bat1 <- CreateSeuratObject(counts = bat1, project = "scRNA-SEQ-NTG", min.cells = 0, min.features = 0, names.delim = "_", names.field = 4)
bat2 <- CreateSeuratObject(counts = bat2, project = "scRNA-SEQ-NTG", min.cells = 0, min.features = 0, names.delim = "_", names.field = 5)

######QC######
bat1[["percent.mt"]] <- PercentageFeatureSet(bat1, pattern = "^mt-")
bat2[["percent.mt"]] <- PercentageFeatureSet(bat2, pattern = "^mt-")


bat1 <- subset(bat1, subset = nFeature_RNA > 5000 & nFeature_RNA < 12000 & percent.mt < 10)
bat2 <- subset(bat2, subset = nFeature_RNA > 5000 & nFeature_RNA < 12000 & percent.mt < 10)

merge <- merge(x = bat1, y = bat2)

merge <- NormalizeData(merge)
merge <- FindVariableFeatures(merge)
all.genes <- rownames(merge)
merge <- ScaleData(merge, features = all.genes)
merge <- JoinLayers(merge)


genes <- rownames(merge)[grep("^Gm", rownames(merge), invert=TRUE)]
Control.markers.model<- FindMarkers(merge,ident.1 = "Control.C",ident.2 = "Control.D",feature=genes,test.use = "bimod", min.pct=0.5)
Control.raw_p_values <- Control.markers.model$p_val
Control.djusted_p_values <- p.adjust(Control.raw_p_values, method = "BH")
Control.markers.model$p_val_adj <- Control.djusted_p_values

Sham.markers.model<- FindMarkers(merge,ident.1 = "Sham.C",ident.2 = "Sham.D",feature=genes,test.use = "bimod", min.pct=0.5)
Sham.raw_p_values <- Sham.markers.model$p_val
Sham.djusted_p_values <- p.adjust(Sham.raw_p_values, method = "BH")
Sham.markers.model$p_val_adj <- Sham.djusted_p_values

names(Control.markers.model) <- paste0(names(Control.markers.model), ".Control")
Control.markers.model$gene <- rownames(Control.markers.model)

names(Sham.markers.model) <- paste0(names(Sham.markers.model), ".Sham")
Sham.markers.model$gene <- rownames(Sham.markers.model)


merge_dat <- merge(Sham.markers.model, Control.markers.model, by= "gene")

common_up <- merge_dat$gene[which(merge_dat$p_val_adj.Control < 0.05 & 
                                 merge_dat$p_val_adj.Sham< 0.05 & merge_dat$avg_log2FC.Sham> 0 & merge_dat$avg_log2FC.Control>0)]
common_down <- merge_dat$gene[which(merge_dat$p_val_adj.Control < 0.05 & 
                                    merge_dat$p_val_adj.Sham< 0.05 & merge_dat$avg_log2FC.Sham< 0 & merge_dat$avg_log2FC.Control< 0)]

control_sham <- subset(merge, idents=c("Control.C", "Control.D", "Sham.C", "Sham.D"))
my_levels <- c("Control.C", "Sham.C","Control.D", "Sham.D")
levels(control_sham) <- my_levels
label <-"Fos"
labels <- rep(x = "transparent", times = length(x = c(common_up, common_down)))
labels[match(x = label, table = c(common_up, common_down))] <- "red"
DoHeatmap(object = control_sham, features = c(common_up, common_down)) + theme(axis.text.y = element_text(color = rev(x = labels)))
avg_expr <- AverageExpression(control_sham, group.by = "orig.ident",assays = "RNA", slot = "data", return.seurat = TRUE)
DoHeatmap(avg_expr,features = "Fos")+scale_fill_gradientn(colors = c("green", "white", "yellow"), na.value = 'transparent')


######################################DIEASE DIFFERENCES#######################################
Control_NTG_C.markers.model<- FindMarkers(merge,ident.1 = "NTG.C",ident.2 = "Control.C",feature=genes,test.use = "bimod", min.pct=0.5)
Control_NTG_C.raw_p_values <- Control_NTG_C.markers.model$p_val
Control_NTG_C.djusted_p_values <- p.adjust(Control_NTG_C.raw_p_values, method = "BH")
Control_NTG_C.markers.model$p_val_adj <- Control_NTG_C.djusted_p_values
Control_NTG_C.positive_genes <- Control_NTG_C.markers.model[Control_NTG_C.markers.model$p_val_adj < 0.01, ]
write.table(Control_NTG_C.markers.model, 'Control_NTG_C.markers.model.txt', sep = '\t', row.names = T, col.names = T, quote = F)



Control_NTG_D.markers.model<- FindMarkers(merge,ident.1 = "NTG.D",ident.2 = "Control.D",feature=genes,test.use = "bimod", min.pct=0.5)
Control_NTG_D.raw_p_values <- Control_NTG_D.markers.model$p_val
Control_NTG_D.djusted_p_values <- p.adjust(Control_NTG_D.raw_p_values, method = "BH")
Control_NTG_D.markers.model$p_val_adj <- Control_NTG_D.djusted_p_values
Control_NTG_D.positive_genes <- Control_NTG_D.markers.model[Control_NTG_D.markers.model$p_val_adj < 0.01, ]
write.table(Control_NTG_D.markers.model, 'Control_NTG_D.markers.model.txt', sep = '\t', row.names = T, col.names = T, quote = F)

SHAM_mTBI_C.markers.model<- FindMarkers(merge,ident.1 = "mTBI.C",ident.2 = "Sham.C",feature=genes,test.use = "bimod", min.pct=0.5)
SHAM_mTBI_C.raw_p_values <- SHAM_mTBI_C.markers.model$p_val
SHAM_mTBI_C.djusted_p_values <- p.adjust(SHAM_mTBI_C.raw_p_values, method = "BH")
SHAM_mTBI_C.markers.model$p_val_adj <- SHAM_mTBI_C.djusted_p_values
SHAM_mTBI_C.positive_genes <- SHAM_mTBI_C.markers.model[SHAM_mTBI_C.markers.model$p_val_adj < 0.01, ]
write.table(SHAM_mTBI_C.markers.model, 'SHAM_mTBI_C.markers.model.txt', sep = '\t', row.names = T, col.names = T, quote = F)


SHAM_mTBI_D.markers.model<- FindMarkers(merge,ident.1 = "mTBI.D",ident.2 = "Sham.D",feature=genes,test.use = "bimod", min.pct=0.5)
SHAM_mTBI_D.raw_p_values <- SHAM_mTBI_D.markers.model$p_val
SHAM_mTBI_D.djusted_p_values <- p.adjust(SHAM_mTBI_D.raw_p_values, method = "BH")
SHAM_mTBI_D.markers.model$p_val_adj <-SHAM_mTBI_D.djusted_p_values
SHAM_mTBI_D.positive_genes <- SHAM_mTBI_D.markers.model[SHAM_mTBI_D.markers.model$p_val_adj < 0.01, ]
write.table(SHAM_mTBI_D.markers.model, 'SHAM_mTBI_D.markers.model.txt', sep = '\t', row.names = T, col.names = T, quote = F)


names(Control_NTG_C.markers.model) <- paste0(names(Control_NTG_C.markers.model), ".NTG_C")
Control_NTG_C.markers.model$gene <- rownames(Control_NTG_C.markers.model)

names(Control_NTG_D.markers.model) <- paste0(names(Control_NTG_D.markers.model), ".NTG_D")
Control_NTG_D.markers.model$gene <- rownames(Control_NTG_D.markers.model)

names(SHAM_mTBI_C.markers.model) <- paste0(names(SHAM_mTBI_C.markers.model), ".mTBI_C")
SHAM_mTBI_C.markers.model$gene <- rownames(SHAM_mTBI_C.markers.model)

names(SHAM_mTBI_D.markers.model) <- paste0(names(SHAM_mTBI_D.markers.model), ".mTBI_D")
SHAM_mTBI_D.markers.model$gene <- rownames(SHAM_mTBI_D.markers.model)

merge_dat1 <- merge(Control_NTG_C.markers.model, Control_NTG_D.markers.model, by= "gene")
merge_dat2 <- merge(SHAM_mTBI_C.markers.model, SHAM_mTBI_D.markers.model, by= "gene")
merge_dat3 <- merge(Control_NTG_C.markers.model, SHAM_mTBI_C.markers.model, by= "gene")
merge_dat4 <- merge(Control_NTG_D.markers.model, SHAM_mTBI_D.markers.model, by= "gene")

merge_dat_diease <- merge(merge_dat1, merge_dat2, by= "gene")

common_UP3 <- merge_dat3$gene[which(merge_dat3$p_val_adj.NTG_C < 0.01 & 
                                      merge_dat3$p_val_adj.mTBI_C < 0.01& merge_dat3$avg_log2FC.NTG_C> 0 & merge_dat3$avg_log2FC.mTBI_C>0)]
common_DOWN3 <- merge_dat3$gene[which(merge_dat3$p_val_adj.NTG_C < 0.01 & 
                                        merge_dat3$p_val_adj.mTBI_C < 0.01& merge_dat3$avg_log2FC.NTG_C< 0 & merge_dat3$avg_log2FC.mTBI_C<0)]

common_UP4 <- merge_dat4$gene[which(merge_dat4$p_val_adj.NTG_D < 0.01 & 
                                      merge_dat4$p_val_adj.mTBI_D < 0.01& merge_dat4$avg_log2FC.NTG_D> 0 & merge_dat4$avg_log2FC.mTBI_D>0)]
common_DOWN4 <- merge_dat4$gene[which(merge_dat4$p_val_adj.NTG_D < 0.01 & 
                                        merge_dat4$p_val_adj.mTBI_D < 0.01& merge_dat4$avg_log2FC.NTG_D< 0 & merge_dat4$avg_log2FC.mTBI_D<0)]
